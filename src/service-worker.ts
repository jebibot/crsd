/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst, StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const redirects: { [path: string]: string } = {
  "/a/moyo": "https://bj.afreecatv.com/duvl123",
  "/a/%EB%AA%A8%EC%9A%94": "https://bj.afreecatv.com/duvl123",
  "/a/elsea": "https://bj.afreecatv.com/elisehs",
  "/a/%EC%97%98%EC%8B%9C": "https://bj.afreecatv.com/elisehs",
  "/a/pyowoo": "https://bj.afreecatv.com/pyowoo",
  "/a/%ED%91%9C%EC%9A%B0": "https://bj.afreecatv.com/pyowoo",
  "/a/hanana": "https://bj.afreecatv.com/17282486",
  "/a/%ED%95%98%EB%82%98%EB%82%98": "https://bj.afreecatv.com/17282486",
  "/a/hiyo": "https://bj.afreecatv.com/song1218",
  "/a/%ED%95%98%EC%9D%B4%EC%9A%94": "https://bj.afreecatv.com/song1218",
  "/y/moyo": "https://www.youtube.com/@M0Y020",
  "/y/%EB%AA%A8%EC%9A%94": "https://www.youtube.com/@M0Y020",
  "/y/elsea": "https://www.youtube.com/@MusiaElsea",
  "/y/%EC%97%98%EC%8B%9C": "https://www.youtube.com/@MusiaElsea",
  "/y/pyowoo": "https://www.youtube.com/@user-pm4sl3vq6o",
  "/y/%ED%91%9C%EC%9A%B0": "https://www.youtube.com/@user-pm4sl3vq6o",
  "/y/hanana": "https://www.youtube.com/@hanana777",
  "/y/%ED%95%98%EB%82%98%EB%82%98": "https://www.youtube.com/@hanana777",
  "/y/hiyo": "https://www.youtube.com/@hi_yo",
  "/y/%ED%95%98%EC%9D%B4%EC%9A%94": "https://www.youtube.com/@hi_yo",
  "/y": "https://www.youtube.com/@cr1108",
  "/c/:post*": "https://cafe.naver.com/cr1108/:post",
  "/c": "https://cafe.naver.com/cr1108",
};
registerRoute(
  ({ request, url }) => request.mode === "navigate" && redirects[url.pathname],
  async ({ url }) => {
    return Response.redirect(redirects[url.pathname], 301);
  }
);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// A runtime caching route for requests that aren't handled by the
// precache, e.g., same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    (url.origin === self.location.origin &&
      (url.pathname.endsWith(".png") || url.pathname.endsWith(".ico"))) ||
    url.origin === "https://profile.img.afreecatv.com",
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

registerRoute(
  new RegExp("https://bjapi.afreecatv.com/api/.*/board/"),
  new NetworkFirst({ cacheName: "api" })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
